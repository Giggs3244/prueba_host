plugins {
    id 'java'
    id 'jacoco'
    id 'maven-publish'
    id 'org.springframework.boot' version '2.3.3.RELEASE'  apply false
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id "org.sonarqube" version "3.0"
    id "org.owasp.dependencycheck" version "6.0.1"
}

ext {
    set('springCloudVersion', "Hoxton.SR8")
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'maven-publish'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'org.owasp.dependencycheck'
    apply plugin: 'org.sonarqube'

    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
        compile {
            //en proteccion preferimos usar log4j que logback
            exclude module: "spring-boot-starter-logging"
        }
    }

    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            credentials {
                username System.getenv("ARTIFACTORY_USER")
                password System.getenv("ARTIFACTORY_PWD")
            }
            url 'https://artefactos.proteccion.com.co:8082/artifactory/Proteccion_Snapshots/'
        }
//        maven {
//            credentials {
//                username System.getenv("ARTIFACTORY_USER")
//                password System.getenv("ARTIFACTORY_PWD")
//            }
//            url 'https://artefactos.proteccion.com.co:8082/artifactory/Proteccion_Releases'
//        }
        maven { url "https://repo.spring.io/milestone" }
        maven {
            url 'https://naturalprogrammer.github.io/mvn-repository'
        }
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        maven { url "https://jitpack.io" } // repo para el validador json
    }

    //dependencias globales transversales todos los modulos
    dependencies {
        compile 'io.projectreactor:reactor-core'
        compile 'io.projectreactor.addons:reactor-extra'
        compile 'org.apache.commons:commons-lang3:3.4'
        compile 'org.slf4j:slf4j-api:1.7.30'
        compile 'org.springframework.boot:spring-boot-starter-log4j2'

        compileOnly 'org.projectlombok:lombok:1.18.12'
        annotationProcessor 'org.projectlombok:lombok:1.18.12'

        testCompileOnly 'org.projectlombok:lombok:1.18.12'
        testAnnotationProcessor 'org.projectlombok:lombok:1.18.12'

        testCompile group: 'uk.co.jemos.podam', name: 'podam', version: '7.1.1.RELEASE'
        testCompile('io.projectreactor:reactor-test')
        testCompile 'org.powermock:powermock-api-mockito2:2.0.0-RC.4'
        testCompile 'org.powermock:powermock-module-junit4:2.0.0-RC.4'
        testCompile 'org.awaitility:awaitility:3.1.3'
        testCompile 'org.springframework.boot:spring-boot-starter-test'
        testCompile 'org.springframework.boot:spring-boot-test-autoconfigure'
        testCompile 'com.google.code.gson:gson:2.8.5'
    }

    jacoco {
        toolVersion = '0.8.2'
    }

    jacocoTestReport {
        reports {
            xml.enabled true
            csv.enabled false
            html.destination file("${buildDir}/jacocoHtml")
        }
    }

    plugins.withType(JacocoPlugin) {
        tasks["test"].finalizedBy 'jacocoTestReport'
    }

    dependencyManagement {
        imports {
            mavenBom org.springframework.boot.gradle.plugin.SpringBootPlugin.BOM_COORDINATES
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    publishing {
        publications {
            mavenJava(MavenPublication) {
                from components.java
            }
        }
        repositories {
            maven {
                name = 'artifactory'
                url = "https://artefactos.proteccion.com.co:8082/artifactory/"+System.getenv("ARTIFACTORY_REPO")
                credentials {
                    username System.getenv("ARTIFACTORY_USER")
                    password System.getenv("ARTIFACTORY_PWD")
                }
            }
        }
    }

    test {
        if (project.hasProperty("excludeTests")) {
            exclude project.property('excludeTests')
        }
        reports.junitXml.destination = file("${buildDir}/test-results")
    }

    sonarqube {
        properties {
            property "sonar.language","java"
            property "sonar.junit.reportsPath","build/test-results"
            property "sonar.coverage.jacoco.xmlReportPaths","build/reports/jacoco/test/jacocoTestReport.xml"
            property "sonar.java.binaries","build/classes"
            property "sonar.sources","src/main/java"
        }
    }

}

// configuracion de sonarqube
sonarqube {
    properties {
        property "sonar.projectName", "${sonar_project_name}"
        property "sonar.projectKey", "${sonar_project_key}"
        property "sonar.projectVersion","${version}"
        property "sonar.sourceEncoding","UTF-8"
    }
}

dependencyCheck {

    cveValidForHours = 8

    // let's ignore errors to make builds in Jenkins more stable
    failOnError = false

    // OWASP Dependency Check plugin for Jenkins needs an XML report,
    // but humans may also need an HTML one
    format = 'ALL'

    // set up a quality gate for vulnerabilities with high severity level:
    //   let's consider that a vulnerability has a high severity level if its CVSS score is higher than 7
    //   the build is going to fail if vulnerabilities with high severity level found
    failBuildOnCVSS = 7

    // specify a list of known issues which contain:
    //   false-positives
    //   confirmed vulnerabilities which are not fixed yet, but we have a ticket for that
    suppressionFile = 'dependency-check-known-issues.xml'

}


